"""
We have a sequence of books: the i-th book has thickness books[i][0] and height books[i][1].

We want to place these books in order onto bookcase shelves that have total width shelf_width.

We choose some of the books to place on this shelf (such that the sum of their thickness is <= shelf_width), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.

Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.

 

Example 1:


Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.
Notice that book number 2 does not have to be on the first shelf.
 

Constraints:

1 <= books.length <= 1000
1 <= books[i][0] <= shelf_width <= 1000
1 <= books[i][1] <= 1000
"""

# 60ms 67 percentile.
class Solution:
    def minHeightShelves(self, books: List[List[int]], shelf_width: int) -> int:
        dp = [0] + [float("inf")]*len(books)
        
        for firstBookOnCurrentShelf in range(len(books)):
            bookWidth, bookHeight = books[i]
            remainingShelfWidth = shelf_width
            lastBookOnCurrentShelf = firstBookOnCurrentShelf
            largestBookHeightOnShelf = 0
            
            while 0 <= lastBookOnCurrentShelf and 0 <= remainingShelfWidth - books[lastBookOnCurrentShelf][0]:
                remainingShelfWidth = remainingShelfWidth - books[lastBookOnCurrentShelf][0]
                largestBookHeightOnShelf = max(largestBookHeightOnShelf, books[lastBookOnCurrentShelf][1])
                dp[i+1] = min(dp[i+1], dp[lastBookOnCurrentShelf] + largestBookHeightOnShelf)
                lastBookOnCurrentShelf -= 1
        
        return dp[-1]

"""
Notes:

DP problem. Each dp element j indicates the smallest height you can generate
given j books. For a given element, you can look back at previous elements and 
decide to include them in a new shelf with the element. This new shelf with height 
equal to that of the max element. We can keep adding books to this shelf until it's
full. At that point, we can look to the dp element immediately before the last book
added to see how much height all the other books generate. 

In other words, for each dp element we are figuing out what books will be included
on the current book's shelf, and then we can look to dp to know how much 
height will be generated by the preceding books. We examine each possible 
combination of books preceding the current book that could reside on the current book's
shelf. 

Start of an example:
books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]]
shelf_width = 4

dp =

[ 0, 1, 3, 4, inf, inf, inf, inf ]
"""